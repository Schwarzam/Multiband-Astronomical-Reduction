"""
Django settings for marServer project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

from mar.config import MarManager

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-72zr4kjh08xs!u&5r1)cev+8qs0an)&jr2ka79qi$$s3#5zg(r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

STRICT_JSON = False

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework.authtoken',
    'rest_framework',
    'django_extensions',
    'knox',
    'accounts',
    'corsheaders',
    'files',
    'process'
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES':
    ('knox.auth.TokenAuthentication',),
    'STRICT_JSON': False
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'marServer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'frontend')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'marServer.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3'
#     }
# }

# DATABASES = {
#     'default': {'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': 'mar',
#         'USER': 't80steam',
#         'PASSWORD': 'password',
#         'HOST': '127.0.0.1',
#         'PORT': '5432',
#     }
# }

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "mar",
        "USER": "postgres",
        "PASSWORD": "password",
        "HOST": "172.17.0.1",  # set in docker-compose.yml ---- It is also possible to use 172.17.0.1 to map to containers machine localhost.
        "PORT": 5432,  # default postgres port
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

APPEND_SLASH=False

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'America/Santiago'
USE_I18N = True
USE_L10N = True
USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
CORS_ORIGIN_ALLOW_ALL = True # added to solve CORS

ROOTFITS = "/reductionmedia/"
#ROOTFITS = "/backup/gustavo_219/reductionmedia/"

if ROOTFITS == "/reductionmedia/":
    try: os.mkdir('/reductionmedia')
    except: pass
#ROOTFITS = "/home/ubuntu/Home/storage"
TMPATH = "/martmp"

try: os.mkdir(TMPATH)
except: pass

MEDIA_ROOT = ROOTFITS
MEDIA_URL = '/media/'

mar_DEBUG = False

types = ["TMP", "MASTERS", "SEXTRACTOR", "SCAMP", "PROCESSED", "TILES", "SWARP", "THUMBS", "LOGS", "CONFIG"]
TYPES = types

BANDS = ['R', 'G', 'I', 'U', 'Z', 'F378', 'F395', 'F410', 'F430', 'F515', 'F660', 'F861']

if mar_DEBUG:
    MarManager.debug = True

try: os.mkdir(ROOTFITS)
except FileExistsError as e: print(e)

for typ in types:
    try: os.mkdir(os.path.join(ROOTFITS, typ))
    except: pass

    if typ == "THUMBS":
        try: os.mkdir(os.path.join(ROOTFITS, typ, "MASTERS"))
        except: pass
        try: os.mkdir(os.path.join(ROOTFITS, typ, "MASTERS", "BIAS"))
        except: pass
        try: os.mkdir(os.path.join(ROOTFITS, typ, "MASTERS", "FLATS"))
        except: pass
        try: os.mkdir(os.path.join(ROOTFITS, typ, "MASTERS", "FRINGE"))
        except: pass

    if typ == "FLAT" or typ == "SCI" or typ == "PROCESSED" or typ == "SWARP":
        for band in BANDS:
            try: os.mkdir(os.path.join(ROOTFITS, typ, band))
            except: pass

        if typ == "PROCESSED":
            try: os.mkdir(os.path.join(ROOTFITS, typ, "BPMASK"))
            except: pass

    if typ == "MASTERS":
        if not os.path.exists(os.path.join(ROOTFITS, typ, "FLATS")):
            os.mkdir(os.path.join(ROOTFITS, typ, "FLATS"))
        if not os.path.exists(os.path.join(ROOTFITS, typ, "BIAS")):
            os.mkdir(os.path.join(ROOTFITS, typ, "BIAS"))
        if not os.path.exists(os.path.join(ROOTFITS, typ, "FRINGE")):
            os.mkdir(os.path.join(ROOTFITS, typ, "FRINGE"))

        for band in BANDS:
            if not os.path.exists(os.path.join(ROOTFITS, typ, "FLATS", band)):
                os.mkdir(os.path.join(ROOTFITS, typ, "FLATS", band))

    if typ == "SCAMP":
        for band in BANDS:
            if not os.path.exists(os.path.join(ROOTFITS, "SCAMP", band)):
                os.mkdir(os.path.join(ROOTFITS, "SCAMP", band))

    if typ == "SEXTRACTOR":
        for band in BANDS:
            if not os.path.exists(os.path.join(ROOTFITS, "SEXTRACTOR", band)):
                os.mkdir(os.path.join(ROOTFITS, "SEXTRACTOR", band))


